package c06;

// 패키지(pakage)
// 하나의 프로젝트를 개발할 때 적게는 수십 개, 많게는 수백 개의 클래스를 작성한다.
// 클래스를 체계적으로 관리하지 않으면 클래스 간의 관계가 뒤엉켜져 복잡하고 난해한 프로그램이 만들어져 유지 보수가 어려워진다.
// 자바에서는 클래스를 체계적으로 관리하기 위해 패키지(package)를 사용한다.

// 패키지의 물리적인 형태는 파일 시스템의 폴더이다.
// 패키지는 단순히 파일 시스템의 폴더 기능만 하는 것이 아니라 클래스의 일부분으로, 클래스를 유일하게 만들어 주는 식별자 역할을 한다.
// 클래스 이름이 동일하더라도 패키지가 다르면 다른 클래스로 인식한다.
// 클래스의 전체 이름은 패키지 이름 + 클래스 이름, 이때 패키지가 상하위로 구분되어 있다면
// 도트(.)를 사용해서 표한한다.
// 상위패키지.하위패키지.클래스

import c06.com.example.PackageEx1;

public class PackageDefine {
	// 패키지 이름의 중복 방지 방법
	// 여러 개발 회사가 함께 참여하는 대규모 프로젝트나 다른 회사의 패키지를 이용해서 개발 할 경우 
	// 패키지 이름이 중복될 가능성이 있다.
	// 그래서 회사들 간 패키지가 서로 중복되지 않도록 흔히 회사의 도메인 이름으로 패키지를 만든다.
	// 도메인은 등록 기관에서 유일한 이름이 되도록 검증되었기 때문에 
	// 도메인 이름으로 패키지를 만들면 다른 회사의 패키지와 중복되는 경우가 발생하지 않는다.
	// 도메인 이름은 포괄적인 이름이 상위 패키지가 되도록 하기 위해 도메인 이름 역순으로 짓는다.
	// 그리고, 마미막에는 프로젝트 이름이나 부서 이름을 붙여주는 것이 관례이다.
	// ex) com.amasung.projectname
	    // com.hyundai.partname
	    // com.lg.projectname
	    // org.apache.cellname
	
	// 패키지 이름은 개발자 임의로 짓지만, 몇 가지 규칙이 있다.
	// 1. 숫자로 시작하지 않고, _$를 제외한 특수 문자를 사용하지 않는다.
	// 2. 관례적으로 특수 문자도 사용하지 않는다.
	// 3. java로 시작하는 패키지는 자바 표준 API(라이브러리)에서만 사용하므로 사용하지 않는다.
	// 4. 패키지는 모두 소문자로 작성하는 것이 관례
	PackageEx1 packageEx1 = new PackageEx1();
}
